from flask_wtf import FlaskForm
from wtforms import StringField, SelectField, TextAreaField, FileField, BooleanField


class NewCardForm(FlaskForm):
	title = StringField('Заголовок')
	category = SelectField('Категория', 
		choices=[
		('', 'Выберите категорию'),
		('Продуктовые магазины', 'Продуктовые магазины'), 
		('Одежда и обувь', 'Одежда и обувь'), 
		('Электроника и бытовая техника', 'Электроника и бытовая техника'), 
		('Косметика и парфюмерия', 'Косметика и парфюмерия'), 
		('Автозапчасти и аксессуары', 'Автозапчасти и аксессуары'), 
		('Рестораны', 'Рестораны'), 
		('Кафе', 'Кафе'), 
		('Бары и ночные клубы', 'Бары и ночные клубы'), 
		('Фаст-фуд', 'Фаст-фуд'), 
		('Кейтеринговые услуги', 'Кейтеринговые услуги'), 
		('Пищевая промышленность', 'Пищевая промышленность'), 
		('Машиностроение и инженерия', 'Машиностроение и инженерия'), 
		('Химическая промышленность', 'Химическая промышленность'), 
		('Электроника и микроэлектроника', 'Электроника и микроэлектроника'), 
		('Деревообрабатывающая промышленность', 'Деревообрабатывающая промышленность'), 
		('Сети ресторанов', 'Сети ресторанов'), 
		('Магазины и розничные франшизы', 'Магазины и розничные франшизы'), 
		('Фитнес-центры', 'Фитнес-центры'), 
		('Образовательные франшизы', 'Образовательные франшизы'), 
		('Медицинские франшизы', 'Медицинские франшизы'), 
		('Разработка программного обеспечения', 'Разработка программного обеспечения'), 
		('Интернет-технологии и электронная коммерция', 'Интернет-технологии и электронная коммерция'), 
		('Медицинские и биотехнологические стартапы', 'Медицинские и биотехнологические стартапы'), 
		('Энергетические технологии', 'Энергетические технологии'), 
		('Искусственный интеллект и машинное обучение', 'Искусственный интеллект и машинное обучение'), 
		('Банки и финансовые учреждения', 'Банки и финансовые учреждения'), 
		('Страховые компании', 'Страховые компании'), 
		('Инвестиционные фонды', 'Инвестиционные фонды'), 
		('Финансовые консультации', 'Финансовые консультации'), 
		('Налоговые и юридические услуги', 'Налоговые и юридические услуги'), 
		('Коммерческая недвижимость', 'Коммерческая недвижимость'), 
		('Отели и мотели', 'Отели и мотели'), 
		('Апартаменты и жилые комплексы', 'Апартаменты и жилые комплексы'), 
		('Торговые центры', 'Торговые центры'), 
		('Производственные объекты', 'Производственные объекты'), 
		('Юридические услуги', 'Юридические услуги'), 
		('Маркетинговые и рекламные агентства', 'Маркетинговые и рекламные агентства'),
		('Инженерные и архитектурные консультации', 'Инженерные и архитектурные консультации'), 
		('Информационные технологии', 'Информационные технологии'), 
		('Образовательные услуги', 'Образовательные услуги'), 
		('Медицинские клиники', 'Медицинские клиники'), 
		('Стоматологические клиники', 'Стоматологические клиники'), 
		('Фармацевтические компании', 'Фармацевтические компании'), 
		('Медицинское оборудование', 'Медицинское оборудование'), 
		('Лаборатории и диагностические центры', 'Лаборатории и диагностические центры'), 
		('Растениеводство', 'Растениеводство'), 
		('Животноводство', 'Животноводство'), 
		('Агротуризм', 'Агротуризм'), 
		('Производство сельскохозяйственной техники', 'Производство сельскохозяйственной техники'), 
		('Лесозаготовки и деревообработка', 'Лесозаготовки и деревообработка')
	])

	purpose = SelectField('Цель продажи', choices=[
		('', 'Выберите цель' ),
		('Инвестирование', 'Инвестирование'), 
		('Покупка', 'Покупка'), 
		('Поиск партнеров', 'Поиск партнеров'), 
		('Поиск предложений о покупке/инвестировании', 'Поиск предложений о покупке/инвестировании'), 
		('Поиск партнерства', 'Поиск партнерства'), 
		('Поиск предложений о займах', 'Поиск предложений о займах')
	])
	stage = SelectField('Этап', choices=[
			('', 'Выберите этап'),
			('Идея', 'Идея'),
			('Стартап (есть команда)', 'Стартап (есть команда)'),
			('Постоянная прибыль', 'Постоянная прибыль'),
			('Нет прибыли', 'Нет прибыли')
		])

	description = TextAreaField('Описание')
	price = StringField('Цена')
	# photos = FileField('Ф')
	# waitForInvest = BooleanField('Looking for investments?')

class CardFormValidator():
	def __init__(self, title: str, category: str, purpose: str, stage: str, description: str, price: str): #, photos: str
		self.title = title
		self.category = category
		self.purpose = purpose
		self.stage = stage
		self.description = description
		self.price = price
		# self.photos = photos

		self.categories = [
			"Продуктовые магазины",
			"Одежда и обувь",
			"Электроника и бытовая техника",
			"Косметика и парфюмерия",
			"Автозапчасти и аксессуары",
			"Рестораны",
			"Кафе",
			"Бары и ночные клубы",
			"Фаст-фуд",
			"Кейтеринговые услуги",
			"Пищевая промышленность",
			"Машиностроение и инженерия",
			"Химическая промышленность",
			"Электроника и микроэлектроника",
			"Деревообрабатывающая промышленность",
			"Сети ресторанов",
			"Магазины и розничные франшизы",
			"Фитнес-центры",
			"Образовательные франшизы",
			"Медицинские франшизы",
			"Разработка программного обеспечения",
			"Интернет-технологии и электронная коммерция",
			"Медицинские и биотехнологические стартапы",
			"Энергетические технологии",
			"Искусственный интеллект и машинное обучение",
			"Банки и финансовые учреждения",
			"Страховые компании",
			"Инвестиционные фонды",
			"Финансовые консультации",
			"Налоговые и юридические услуги",
			"Коммерческая недвижимость",
			"Отели и мотели",
			"Апартаменты и жилые комплексы",
			"Торговые центры",
			"Производственные объекты",
			"Юридические услуги",
			"Маркетинговые и рекламные агентства",
			"Инженерные и архитектурные консультации",
			"Информационные технологии",
			"Образовательные услуги",
			"Медицинские клиники",
			"Стоматологические клиники",
			"Фармацевтические компании",
			"Медицинское оборудование",
			"Лаборатории и диагностические центры",
			"Растениеводство",
			"Животноводство",
			"Агротуризм",
			"Производство сельскохозяйственной техники",
			"Лесозаготовки и деревообработка"
		]

		self.purposes = [
			"Инвестирование",
			"Покупка",
			"Поиск партнеров",
			"Поиск предложений о покупке/инвестировании",
			"Поиск партнерства",
			"Поиск предложений о займах"
		]
		self.stages = [
			"Идея",
			"Стартап (есть команда)",
			"Постоянная прибыль",
			"Нет прибыли"
		]
		

	def validateTitle(self) -> None | dict:
		if not bool(self.title):
			return {
				"message": "Title is too long",
				"error": True,
				"field": "title"
			}
		if len(self.title) > 40:
			return {
				"message": "Title is too long",
				"error": True,
				"field": "title"
			}
		
	def validateCategory(self) -> None | dict:
		if self.category == '':
			return {
				"message": "Please, choose category",
				"error": True,
				"field": "category"
			}
		if self.category not in self.categories:
			return {
				"message": "Incorrect category",
				"error": True,
				"field": "category"
			}
		
	def validatePurpose(self) -> None | dict:
		if self.purpose == '':
			return {
				"message": "Please, choose target",
				"error": True,
				"field": "purpose"
			}
		if self.purpose not in self.categories:
			return {
				"message": "Incorrect target",
				"error": True,
				"field": "purpose"
			}
		
	def validateStage(self) -> None | dict:
		if self.stage == '':
			return {
				"message": "Please, choose stage",
				"error": True,
				"field": "stage"
			}
		if self.stage not in self.stages:
			return {
				"message": "Incorrect stage",
				"error": True,
				"field": "stage"
			}

	def validateDescription(self) -> None | dict:
		if not bool(self.description):
			return {
				"message": "Please add a description",
				"error": True,
				"field": "description"
			}
		if len(self.description) > 200:
			return {
				"message": "Description is too long",
				"error": True,
				"field": "description"
			}
		
	def validatePrice(self) -> None | dict:
		if not bool(self.price):
			return {
				"message": "Please set price",
				"error": True,
				"field": "price"
			}
		for char in str(self.price):
			if not char.isdigit():
				return {
					"message": "Incorrect price",
					"error": True,
					"field": "price"
				}
		
	


	def validateForm(self) -> dict | None:
		fields_to_validate = {
			'Заголовок': self.validateTitle,
			'Категория': self.validateCategory,
			'Стадия': self.validateStage,
			'Описание': self.validateDescription,
			'Цена': self.validatePrice,
			#'photos': self.validatePhotos
		}

		for field_name, validation_function in fields_to_validate.items():
			validity = validation_function()
			if validity:
				return validity